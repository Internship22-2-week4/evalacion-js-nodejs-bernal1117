openapi: 3.0.0
info:
  title: Unsplash-image
  description: 'Its not instagram, its not pinterest, ITS UNSPLASH !!!'
  contact:
    email: support@unsplash.com
  license:
    name: Apache 2.0
    url: http://apache.net/support/unsplash
  version: 1.0.0
servers:
- url: http://localhost:5000/api/v1
tags:
- name: Photo
  description: In this section are the Unsplash photos
- name: User
  description: In this section are the users of Unsplash
- name: Collection
  description: In this section are the collections of Unsplash
components:
  schemas:
    Auth:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    Photo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        uri:
          type: string
        desc:
          type: string
        idUser:
          type: integer
          format: int64
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        password:
          type: string
    Collection:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        imagen: 
          type: string
        idSong:
          type: integer
          format: int32
paths:
  /user/signup:
    post:
      tags:
      - User
      summary: Create user 
      operantionId: createUser
      description: Se creara un usuario para  utilizarlo en la aplicacion.
      requestBody:
        description: ingrese los datos del usuario a crear.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: registro exitoso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: bad request
          content: {}
        404:
          description: not found
          content: {}
    x-codegen-request-body-name: body
  /user/getuser:
    get:
      tags:
      - User
      summary: "Find user by ID"
      description: "Returns a single user"
      operationId: "getUserById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: Succesful operation
          schema:
            $ref: '#/components/schemas/User'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - api_key: []
  /user/deleteuser:
    delete:
      tags:
      - User
      summary: "Delete user by ID"
      description: "Delete user filter by ID and get the response"
      operationId: "DeleteUserById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: Succesful operation
          schema:
            $ref: '#/components/schemas/User'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - api_key: []
  /user/updateuser:
    put:
      tags:
      - User
      summary: Update user 
      operantionId: Update user
      description: Update user in the application
      requestBody:
        description: ingrese los datos del usuario a hacer el update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: registro exitoso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: bad request
          content: {}
        404:
          description: not found
          content: {}
    x-codegen-request-body-name: body
  /photo/newphoto:
    post:
      tags:
      - Photo
      summary: Create new Photo
      operantionId: createPhotoSong
      description: This create a new photo tu use in the application Unsplash
      requestBody:
        description: Please insert the properties of the photo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
          application/xml:
            schema:
              $ref: '#/components/schemas/Song'
        required: true
      responses:
        200:
          description: registro exitoso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        400:
          description: bad request
          content: {}
        404:
          description: not found
          content: {}
    x-codegen-request-body-name: body
  /photo/getphotos:
    get:
      tags:
      - Photo
      summary: "Find photo by ID"
      description: "Returns photo by id"
      operationId: "getPhotoById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "photoId"
        in: "path"
        description: "ID of photo to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: Succesfull operation
          schema:
            $ref: '#/components/schemas/Photo'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - api_key: []
  /photo/deletephoto:
    delete:
      tags:
      - Photo
      summary: "Delete photo by ID"
      description: "Delete photo filter by ID and get the response"
      operationId: "DeletePhotoById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "photoId"
        in: "path"
        description: "ID of photo to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: Succesful operation
          schema:
            $ref: '#/components/schemas/Photo'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - api_key: []
  /collection/createcollection:
    post:
      tags:
      - Collection
      summary: Create a new collection
      operantionId: createCollection
      description: You can create a new collection in this place
      requestBody:
        description: Insert the requierments to create a collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
          application/xml:
            schema:
              $ref: '#/components/schemas/Collection'
        required: true
      responses:
        200:
          description: registro exitoso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        400:
          description: bad request
          content: {}
        404:
          description: not found
          content: {}
    x-codegen-request-body-name: body
  /collection/getcollection:
    get:
      tags:
      - Collection
      summary: "Find collection by ID"
      description: "Returns collection"
      operationId: "getCollectionById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "collectionId"
        in: "path"
        description: "ID of collection to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: Succesful operation
          schema:
            $ref: '#/components/schemas/Collection'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - api_key: []
  /delete/deletecollection:
    delete:
      tags:
      - Collection
      summary: "Delete collection by ID"
      description: "Delete collection filter by ID and get the response"
      operationId: "DeleteCollectionById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "collectionId"
        in: "path"
        description: "ID of collection to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: Succesful operation
          schema:
            $ref: '#/components/schemas/Collection'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - api_key: []
  /collection/addnewphoto:
    put:
      tags:
      - Collection
      summary: Add new photo in the collection
      operantionId: Add new photo in collection
      description: Add new photo in the collection in the application Unsplash
      requestBody:
        description: Insert the ID of then photo to add at the collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
          application/xml:
            schema:
              $ref: '#/components/schemas/Collection'
        required: true
      responses:
        200:
          description: registro exitoso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        400:
          description: bad request
          content: {}
        404:
          description: not found
          content: {}
    x-codegen-request-body-name: body
  /auth/signin:
    post:
      tags:
      - Auth
      summary: Verificate user 
      operantionId: VerifyUser
      description: Se verifica un usuario ya creado para que pueda acceder segun sus credenciales
      requestBody:
        description: Ingrese sus datos correspondientes para entrar a la aplicacion.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
          application/xml:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        200:
          description: registro exitoso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
        400:
          description: bad request
          content: {}
        404:
          description: not found
          content: {}
    x-codegen-request-body-name: body